{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categories","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","key","GifExpertApp","categorie","ReactDOM","render","document","getElementById"],"mappings":"6LA6BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,qBADK,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UACpDH,GAFiB,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAOTA,EAAKC,OAPI,uBAMfC,EANe,EAMfA,KAEEC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAgBZM,GAhBY,4CAAH,sDCWLO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,yBAAKc,UAAU,QACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCcKO,EAhBC,SAAC,GAAoB,IAAlBnB,EAAiB,EAAjBA,WAAiB,ECIR,SAACA,GAAgB,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAaxC,OAPAC,qBAAU,WACNxB,EAAQC,GAAYwB,MAAK,SAAAhB,GAAI,OAAIc,EAAS,CACtCf,KAAMC,EACNY,SAAS,SAEd,CAACpB,IAEGqB,EDhBiBI,CAAazB,GAA/BO,EAD0B,EAC1BA,KAAMa,EADoB,EACpBA,QAEd,OACE,oCACE,4BAAKpB,GACJoB,GAAW,yCACZ,yBAAKJ,UAAU,aACZT,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEQzBiB,EAjBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,WADrB,mBAClBc,EADkB,KACNf,EADM,KAGzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGe,EAAWS,KAAI,SAACmB,GAAD,OACd,kBAAC,EAAD,CAASF,IAAKE,EAAW5B,WAAY4B,U,MCT/CC,IAASC,OAEL,kBACA,EADA,MAGAC,SAASC,eAAe,U","file":"static/js/main.eb5ca931.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState();\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async(categories) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n      categories\r\n    )}&limit=20&api_key=1QMqOCPJAczHl0L3k0AGIfwaOuqh4UX9`;\r\n    const resp = await fetch(url);\r\n    const {\r\n        data\r\n    } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ categories }) => {\r\n  const { data, loading } = useFetchGifs(categories);\r\n\r\n  return (\r\n    <>\r\n      <h3>{categories}</h3>\r\n      {loading && <p>Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import {\r\n    useEffect,\r\n    useState\r\n} from \"react\"\r\nimport {\r\n    getGifs\r\n} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (categories) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() => {\r\n        getGifs(categories).then(gifs => setstate({\r\n            data: gifs,\r\n            loading: false\r\n        }));\r\n    }, [categories]);\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Naruto\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((categorie) => (\r\n          <GifGrid key={categorie} categories={categorie} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <\n    GifExpertApp / > ,\n\n    document.getElementById('root')\n);"],"sourceRoot":""}